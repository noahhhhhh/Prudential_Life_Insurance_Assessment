, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
ScoreQuadraticWeightedKappa(y.valid, round(pred.valid))
table(round(pred.train))
rm(list = ls()); gc();
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Prudential_Life_Insurance_Assessment/")
load("data/data_preprocess/dt_proprocess_combine.RData")
source("script/utilities/metrics.R")
require(data.table)
require(caret)
require(Metrics)
require(Hmisc)
############################################################################################
## 1.0 xgboost - gbtree ####################################################################
############################################################################################
################################
## 1.1 train, valid, and test ##
################################
require(xgboost)
require(Ckmeans.1d.dp)
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed.combine[isTest == 0]$Response, p = .9, list = F) # remember to change it to .66
dt.train <- dt.preprocessed.combine[isTest == 0][ind.train]
dt.valid <- dt.preprocessed.combine[isTest == 0][-ind.train]
set.seed(888)
ind.valid <- createDataPartition(dt.valid$Response, p = .5, list = F)
dt.valid1 <- dt.valid[ind.valid]
dt.valid2 <- dt.valid[-ind.valid]
dt.test <- dt.preprocessed.combine[isTest == 1]
dim(dt.train); dim(dt.valid); dim(dt.test)
x.train <- model.matrix(Response ~., dt.train[, !c("Id", "isTest"), with = F])[, -1]
y.train <- dt.train$Response
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid <- model.matrix(Response ~., dt.valid[, !c("Id", "isTest"), with = F])[, -1]
y.valid <- dt.valid$Response
dmx.valid <- xgb.DMatrix(data =  x.valid, label = y.valid)
x.valid1 <- model.matrix(Response ~., dt.valid1[, !c("Id", "isTest"), with = F])[, -1]
y.valid1 <- dt.valid1$Response
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(Response ~., dt.valid2[, !c("Id", "isTest"), with = F])[, -1]
y.valid2 <- dt.valid2$Response
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.preprocessed.combine[isTest == 1, !c("Id", "isTest", "Response"), with = F])[, -1]
################################
## 1.2 train ###################
################################
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "reg:linear" # "count:poisson"
, params = list(nthread = 8
# , num_parallel_tree = 200
, min_child_weight = 20
, max_depth = 8
, subsample = .8
, colsample_bytree = .8
, metrics = "rmse"
)
, num_trees = 200
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
rm(list = ls()); gc();
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Prudential_Life_Insurance_Assessment/")
load("data/data_preprocess/dt_proprocess_combine.RData")
source("script/utilities/metrics.R")
require(data.table)
require(caret)
require(Metrics)
require(Hmisc)
############################################################################################
## 1.0 xgboost - gbtree ####################################################################
############################################################################################
################################
## 1.1 train, valid, and test ##
################################
require(xgboost)
require(Ckmeans.1d.dp)
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed.combine[isTest == 0]$Response, p = .9, list = F) # remember to change it to .66
dt.train <- dt.preprocessed.combine[isTest == 0][ind.train]
dt.valid <- dt.preprocessed.combine[isTest == 0][-ind.train]
set.seed(888)
ind.valid <- createDataPartition(dt.valid$Response, p = .5, list = F)
dt.valid1 <- dt.valid[ind.valid]
dt.valid2 <- dt.valid[-ind.valid]
dt.test <- dt.preprocessed.combine[isTest == 1]
dim(dt.train); dim(dt.valid); dim(dt.test)
x.train <- model.matrix(Response ~., dt.train[, !c("Id", "isTest"), with = F])[, -1]
y.train <- dt.train$Response
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid <- model.matrix(Response ~., dt.valid[, !c("Id", "isTest"), with = F])[, -1]
y.valid <- dt.valid$Response
dmx.valid <- xgb.DMatrix(data =  x.valid, label = y.valid)
x.valid1 <- model.matrix(Response ~., dt.valid1[, !c("Id", "isTest"), with = F])[, -1]
y.valid1 <- dt.valid1$Response
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(Response ~., dt.valid2[, !c("Id", "isTest"), with = F])[, -1]
y.valid2 <- dt.valid2$Response
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.preprocessed.combine[isTest == 1, !c("Id", "isTest", "Response"), with = F])[, -1]
################################
## 1.2 train ###################
################################
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "reg:linear" # "count:poisson"
, params = list(nthread = 8
# , num_parallel_tree = 200
, min_child_weight = 20
, max_depth = 8
, subsample = .8
, colsample_bytree = .8
, metrics = "rmse"
)
, num_trees = 2000
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
rm(list = ls()); gc();
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Prudential_Life_Insurance_Assessment/")
load("data/data_preprocess/dt_proprocess_combine.RData")
source("script/utilities/metrics.R")
require(data.table)
require(caret)
require(Metrics)
require(Hmisc)
############################################################################################
## 1.0 xgboost - gbtree ####################################################################
############################################################################################
################################
## 1.1 train, valid, and test ##
################################
require(xgboost)
require(Ckmeans.1d.dp)
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed.combine[isTest == 0]$Response, p = .9, list = F) # remember to change it to .66
dt.train <- dt.preprocessed.combine[isTest == 0][ind.train]
dt.valid <- dt.preprocessed.combine[isTest == 0][-ind.train]
set.seed(888)
ind.valid <- createDataPartition(dt.valid$Response, p = .5, list = F)
dt.valid1 <- dt.valid[ind.valid]
dt.valid2 <- dt.valid[-ind.valid]
dt.test <- dt.preprocessed.combine[isTest == 1]
dim(dt.train); dim(dt.valid); dim(dt.test)
x.train <- model.matrix(Response ~., dt.train[, !c("Id", "isTest"), with = F])[, -1]
y.train <- dt.train$Response
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid <- model.matrix(Response ~., dt.valid[, !c("Id", "isTest"), with = F])[, -1]
y.valid <- dt.valid$Response
dmx.valid <- xgb.DMatrix(data =  x.valid, label = y.valid)
x.valid1 <- model.matrix(Response ~., dt.valid1[, !c("Id", "isTest"), with = F])[, -1]
y.valid1 <- dt.valid1$Response
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(Response ~., dt.valid2[, !c("Id", "isTest"), with = F])[, -1]
y.valid2 <- dt.valid2$Response
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.preprocessed.combine[isTest == 1, !c("Id", "isTest", "Response"), with = F])[, -1]
################################
## 1.2 train ###################
################################
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "multi:softmax" # "reg:linear" # "count:poisson"
, params = list(nthread = 8
, num_parallel_tree = 200
, min_child_weight = 20
, max_depth = 8
, subsample = .8
, colsample_bytree = .8
, metrics = "rmse"
)
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
rm(list = ls()); gc();
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Prudential_Life_Insurance_Assessment/")
load("data/data_preprocess/dt_proprocess_combine.RData")
source("script/utilities/metrics.R")
require(data.table)
require(caret)
require(Metrics)
require(Hmisc)
############################################################################################
## 1.0 xgboost - gbtree ####################################################################
############################################################################################
################################
## 1.1 train, valid, and test ##
################################
require(xgboost)
require(Ckmeans.1d.dp)
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed.combine[isTest == 0]$Response, p = .9, list = F) # remember to change it to .66
dt.train <- dt.preprocessed.combine[isTest == 0][ind.train]
dt.valid <- dt.preprocessed.combine[isTest == 0][-ind.train]
set.seed(888)
ind.valid <- createDataPartition(dt.valid$Response, p = .5, list = F)
dt.valid1 <- dt.valid[ind.valid]
dt.valid2 <- dt.valid[-ind.valid]
dt.test <- dt.preprocessed.combine[isTest == 1]
dim(dt.train); dim(dt.valid); dim(dt.test)
x.train <- model.matrix(Response ~., dt.train[, !c("Id", "isTest"), with = F])[, -1]
y.train <- dt.train$Response
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid <- model.matrix(Response ~., dt.valid[, !c("Id", "isTest"), with = F])[, -1]
y.valid <- dt.valid$Response
dmx.valid <- xgb.DMatrix(data =  x.valid, label = y.valid)
x.valid1 <- model.matrix(Response ~., dt.valid1[, !c("Id", "isTest"), with = F])[, -1]
y.valid1 <- dt.valid1$Response
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(Response ~., dt.valid2[, !c("Id", "isTest"), with = F])[, -1]
y.valid2 <- dt.valid2$Response
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.preprocessed.combine[isTest == 1, !c("Id", "isTest", "Response"), with = F])[, -1]
################################
## 1.2 train ###################
################################
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "reg:linear" # "count:poisson"
, params = list(nthread = 8
, num_parallel_tree = 200
# , min_child_weight = 20
# , max_depth = 8
, subsample = .8
, colsample_bytree = .8
# , metrics = "rmse"
)
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
hist(pred.train)
pred.train <- predict(md.rf, dmx.train) * 3
pred.valid <- predict(md.rf, dmx.valid) * 3
pred.test <- predict(md.rf, x.test) * 3
ScoreQuadraticWeightedKappa(y.valid, round(pred.valid))
ScoreQuadraticWeightedKappa(y.valid, as.integer(pred.valid))
table(as.integer(pred.valid))
rm(list = ls()); gc();
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Prudential_Life_Insurance_Assessment/")
load("data/data_preprocess/dt_proprocess_combine.RData")
source("script/utilities/metrics.R")
require(data.table)
require(caret)
require(Metrics)
require(Hmisc)
############################################################################################
## 1.0 xgboost - gbtree ####################################################################
############################################################################################
################################
## 1.1 train, valid, and test ##
################################
require(xgboost)
require(Ckmeans.1d.dp)
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed.combine[isTest == 0]$Response, p = .9, list = F) # remember to change it to .66
dt.train <- dt.preprocessed.combine[isTest == 0][ind.train]
dt.valid <- dt.preprocessed.combine[isTest == 0][-ind.train]
set.seed(888)
ind.valid <- createDataPartition(dt.valid$Response, p = .5, list = F)
dt.valid1 <- dt.valid[ind.valid]
dt.valid2 <- dt.valid[-ind.valid]
dt.test <- dt.preprocessed.combine[isTest == 1]
dim(dt.train); dim(dt.valid); dim(dt.test)
x.train <- model.matrix(Response ~., dt.train[, !c("Id", "isTest"), with = F])[, -1]
y.train <- dt.train$Response
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid <- model.matrix(Response ~., dt.valid[, !c("Id", "isTest"), with = F])[, -1]
y.valid <- dt.valid$Response
dmx.valid <- xgb.DMatrix(data =  x.valid, label = y.valid)
x.valid1 <- model.matrix(Response ~., dt.valid1[, !c("Id", "isTest"), with = F])[, -1]
y.valid1 <- dt.valid1$Response
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(Response ~., dt.valid2[, !c("Id", "isTest"), with = F])[, -1]
y.valid2 <- dt.valid2$Response
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.preprocessed.combine[isTest == 1, !c("Id", "isTest", "Response"), with = F])[, -1]
################################
## 1.2 train ###################
################################
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "count:poisson"
, params = list(nthread = 8
, num_parallel_tree = 200
# , min_child_weight = 20
# , max_depth = 8
, subsample = .8
, colsample_bytree = .8
# , metrics = "rmse"
)
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
rm(list = ls()); gc();
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Prudential_Life_Insurance_Assessment/")
load("data/data_preprocess/dt_proprocess_combine.RData")
source("script/utilities/metrics.R")
require(data.table)
require(caret)
require(Metrics)
require(Hmisc)
############################################################################################
## 1.0 xgboost - gbtree ####################################################################
############################################################################################
################################
## 1.1 train, valid, and test ##
################################
require(xgboost)
require(Ckmeans.1d.dp)
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed.combine[isTest == 0]$Response, p = .9, list = F) # remember to change it to .66
dt.train <- dt.preprocessed.combine[isTest == 0][ind.train]
dt.valid <- dt.preprocessed.combine[isTest == 0][-ind.train]
set.seed(888)
ind.valid <- createDataPartition(dt.valid$Response, p = .5, list = F)
dt.valid1 <- dt.valid[ind.valid]
dt.valid2 <- dt.valid[-ind.valid]
dt.test <- dt.preprocessed.combine[isTest == 1]
dim(dt.train); dim(dt.valid); dim(dt.test)
x.train <- model.matrix(Response ~., dt.train[, !c("Id", "isTest"), with = F])[, -1]
y.train <- dt.train$Response
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid <- model.matrix(Response ~., dt.valid[, !c("Id", "isTest"), with = F])[, -1]
y.valid <- dt.valid$Response
dmx.valid <- xgb.DMatrix(data =  x.valid, label = y.valid)
x.valid1 <- model.matrix(Response ~., dt.valid1[, !c("Id", "isTest"), with = F])[, -1]
y.valid1 <- dt.valid1$Response
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(Response ~., dt.valid2[, !c("Id", "isTest"), with = F])[, -1]
y.valid2 <- dt.valid2$Response
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.preprocessed.combine[isTest == 1, !c("Id", "isTest", "Response"), with = F])[, -1]
################################
## 1.2 train ###################
################################
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "count:poisson"
, params = list(nthread = 8
, num_parallel_tree = 500
# , min_child_weight = 20
# , max_depth = 8
, subsample = .8
, colsample_bytree = .8
, metrics = "rmse"
)
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
table(round(pred.train))
rm(list = ls()); gc();
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Prudential_Life_Insurance_Assessment/")
load("data/data_preprocess/dt_proprocess_combine.RData")
source("script/utilities/metrics.R")
require(data.table)
require(caret)
require(Metrics)
require(Hmisc)
############################################################################################
## 1.0 xgboost - gbtree ####################################################################
############################################################################################
################################
## 1.1 train, valid, and test ##
################################
require(xgboost)
require(Ckmeans.1d.dp)
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed.combine[isTest == 0]$Response, p = .9, list = F) # remember to change it to .66
dt.train <- dt.preprocessed.combine[isTest == 0][ind.train]
dt.valid <- dt.preprocessed.combine[isTest == 0][-ind.train]
set.seed(888)
ind.valid <- createDataPartition(dt.valid$Response, p = .5, list = F)
dt.valid1 <- dt.valid[ind.valid]
dt.valid2 <- dt.valid[-ind.valid]
dt.test <- dt.preprocessed.combine[isTest == 1]
dim(dt.train); dim(dt.valid); dim(dt.test)
x.train <- model.matrix(Response ~., dt.train[, !c("Id", "isTest"), with = F])[, -1]
y.train <- dt.train$Response
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid <- model.matrix(Response ~., dt.valid[, !c("Id", "isTest"), with = F])[, -1]
y.valid <- dt.valid$Response
dmx.valid <- xgb.DMatrix(data =  x.valid, label = y.valid)
x.valid1 <- model.matrix(Response ~., dt.valid1[, !c("Id", "isTest"), with = F])[, -1]
y.valid1 <- dt.valid1$Response
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(Response ~., dt.valid2[, !c("Id", "isTest"), with = F])[, -1]
y.valid2 <- dt.valid2$Response
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.preprocessed.combine[isTest == 1, !c("Id", "isTest", "Response"), with = F])[, -1]
################################
## 1.2 train ###################
################################
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "count:poisson"
, params = list(nthread = 8
, eta = .025
, num_parallel_tree = 200
# , min_child_weight = 20
# , max_depth = 8
, subsample = .8
, colsample_bytree = .8
, metrics = "rmse"
)
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
table(round(pred.train))
set.seed(888)
md.rf <- xgb.train(data = dmx.train
, booster = "gbtree"
, objective = "count:poisson"
, params = list(nthread = 8
, eta = .025
, num_parallel_tree = 200
# , min_child_weight = 20
# , max_depth = 8
, subsample = .8
, colsample_bytree = .8
, metrics = "rmse"
)
, maximize = F
, nrounds = 1
, watchlist = list(valid = dmx.valid, train = dmx.train)
, verbose = T
)
pred.train <- predict(md.rf, dmx.train)
pred.valid <- predict(md.rf, dmx.valid)
pred.test <- predict(md.rf, x.test)
table(round(pred.train))
?detectCores
?makeCluster
?registerDoParallel
require(parallel)
require(doParallel)
require(foreach)
# set.seed(888)
# md.rf <- xgb.train(data = dmx.train
#                    , booster = "gbtree"
#                    , objective = "count:poisson"
#                    , params = list(nthread = 8
#                                    , eta = .025
#                                    , num_parallel_tree = 200
#                                    # , min_child_weight = 20
#                                    # , max_depth = 8
#                                    , subsample = .8
#                                    , colsample_bytree = .8
#                                    , metrics = "rmse"
#                    )
#                    , maximize = F
#                    , nrounds = 1
#                    , watchlist = list(valid = dmx.valid, train = dmx.train)
#                    , verbose = T
# )
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
set.seed(888)
md.rf <- train(Response ~.
, data = dt.train[, !c("Id", "isTest"), with = F]
, method = "rf"
, trControl = trainControl(method = "cv",number = 3)
, allowParallel = T)
require(ranger)
stopCluster(cl)
?ranger
dt.train.rf <- dt.train[, !c("Id", "isTest"), with = F]
mtry <- round(sqrt(dim(dt.train.rf)[2]))
mtry
rm(list = ls()); gc();
